// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"hue-n-gnk/csv-to-gitisue/database/entities"
)

func newNulabBacklogIssue(db *gorm.DB, opts ...gen.DOOption) nulabBacklogIssue {
	_nulabBacklogIssue := nulabBacklogIssue{}

	_nulabBacklogIssue.nulabBacklogIssueDo.UseDB(db, opts...)
	_nulabBacklogIssue.nulabBacklogIssueDo.UseModel(&entities.NulabBacklogIssue{})

	tableName := _nulabBacklogIssue.nulabBacklogIssueDo.TableName()
	_nulabBacklogIssue.ALL = field.NewAsterisk(tableName)
	_nulabBacklogIssue.ID = field.NewString(tableName, "id")
	_nulabBacklogIssue.BacklogID = field.NewString(tableName, "backlog_id")
	_nulabBacklogIssue.GitID = field.NewString(tableName, "git_id")
	_nulabBacklogIssue.CreatedAt = field.NewTime(tableName, "created_at")
	_nulabBacklogIssue.UpdatedAt = field.NewTime(tableName, "updated_at")
	_nulabBacklogIssue.DeletedAt = field.NewField(tableName, "deleted_at")

	_nulabBacklogIssue.fillFieldMap()

	return _nulabBacklogIssue
}

type nulabBacklogIssue struct {
	nulabBacklogIssueDo

	ALL       field.Asterisk
	ID        field.String
	BacklogID field.String
	GitID     field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (n nulabBacklogIssue) Table(newTableName string) *nulabBacklogIssue {
	n.nulabBacklogIssueDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nulabBacklogIssue) As(alias string) *nulabBacklogIssue {
	n.nulabBacklogIssueDo.DO = *(n.nulabBacklogIssueDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nulabBacklogIssue) updateTableName(table string) *nulabBacklogIssue {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.BacklogID = field.NewString(table, "backlog_id")
	n.GitID = field.NewString(table, "git_id")
	n.CreatedAt = field.NewTime(table, "created_at")
	n.UpdatedAt = field.NewTime(table, "updated_at")
	n.DeletedAt = field.NewField(table, "deleted_at")

	n.fillFieldMap()

	return n
}

func (n *nulabBacklogIssue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nulabBacklogIssue) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 6)
	n.fieldMap["id"] = n.ID
	n.fieldMap["backlog_id"] = n.BacklogID
	n.fieldMap["git_id"] = n.GitID
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
	n.fieldMap["deleted_at"] = n.DeletedAt
}

func (n nulabBacklogIssue) clone(db *gorm.DB) nulabBacklogIssue {
	n.nulabBacklogIssueDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nulabBacklogIssue) replaceDB(db *gorm.DB) nulabBacklogIssue {
	n.nulabBacklogIssueDo.ReplaceDB(db)
	return n
}

type nulabBacklogIssueDo struct{ gen.DO }

type INulabBacklogIssueDo interface {
	gen.SubQuery
	Debug() INulabBacklogIssueDo
	WithContext(ctx context.Context) INulabBacklogIssueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INulabBacklogIssueDo
	WriteDB() INulabBacklogIssueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INulabBacklogIssueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INulabBacklogIssueDo
	Not(conds ...gen.Condition) INulabBacklogIssueDo
	Or(conds ...gen.Condition) INulabBacklogIssueDo
	Select(conds ...field.Expr) INulabBacklogIssueDo
	Where(conds ...gen.Condition) INulabBacklogIssueDo
	Order(conds ...field.Expr) INulabBacklogIssueDo
	Distinct(cols ...field.Expr) INulabBacklogIssueDo
	Omit(cols ...field.Expr) INulabBacklogIssueDo
	Join(table schema.Tabler, on ...field.Expr) INulabBacklogIssueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INulabBacklogIssueDo
	RightJoin(table schema.Tabler, on ...field.Expr) INulabBacklogIssueDo
	Group(cols ...field.Expr) INulabBacklogIssueDo
	Having(conds ...gen.Condition) INulabBacklogIssueDo
	Limit(limit int) INulabBacklogIssueDo
	Offset(offset int) INulabBacklogIssueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INulabBacklogIssueDo
	Unscoped() INulabBacklogIssueDo
	Create(values ...*entities.NulabBacklogIssue) error
	CreateInBatches(values []*entities.NulabBacklogIssue, batchSize int) error
	Save(values ...*entities.NulabBacklogIssue) error
	First() (*entities.NulabBacklogIssue, error)
	Take() (*entities.NulabBacklogIssue, error)
	Last() (*entities.NulabBacklogIssue, error)
	Find() ([]*entities.NulabBacklogIssue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.NulabBacklogIssue, err error)
	FindInBatches(result *[]*entities.NulabBacklogIssue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.NulabBacklogIssue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INulabBacklogIssueDo
	Assign(attrs ...field.AssignExpr) INulabBacklogIssueDo
	Joins(fields ...field.RelationField) INulabBacklogIssueDo
	Preload(fields ...field.RelationField) INulabBacklogIssueDo
	FirstOrInit() (*entities.NulabBacklogIssue, error)
	FirstOrCreate() (*entities.NulabBacklogIssue, error)
	FindByPage(offset int, limit int) (result []*entities.NulabBacklogIssue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INulabBacklogIssueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nulabBacklogIssueDo) Debug() INulabBacklogIssueDo {
	return n.withDO(n.DO.Debug())
}

func (n nulabBacklogIssueDo) WithContext(ctx context.Context) INulabBacklogIssueDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nulabBacklogIssueDo) ReadDB() INulabBacklogIssueDo {
	return n.Clauses(dbresolver.Read)
}

func (n nulabBacklogIssueDo) WriteDB() INulabBacklogIssueDo {
	return n.Clauses(dbresolver.Write)
}

func (n nulabBacklogIssueDo) Session(config *gorm.Session) INulabBacklogIssueDo {
	return n.withDO(n.DO.Session(config))
}

func (n nulabBacklogIssueDo) Clauses(conds ...clause.Expression) INulabBacklogIssueDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nulabBacklogIssueDo) Returning(value interface{}, columns ...string) INulabBacklogIssueDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nulabBacklogIssueDo) Not(conds ...gen.Condition) INulabBacklogIssueDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nulabBacklogIssueDo) Or(conds ...gen.Condition) INulabBacklogIssueDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nulabBacklogIssueDo) Select(conds ...field.Expr) INulabBacklogIssueDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nulabBacklogIssueDo) Where(conds ...gen.Condition) INulabBacklogIssueDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nulabBacklogIssueDo) Order(conds ...field.Expr) INulabBacklogIssueDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nulabBacklogIssueDo) Distinct(cols ...field.Expr) INulabBacklogIssueDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nulabBacklogIssueDo) Omit(cols ...field.Expr) INulabBacklogIssueDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nulabBacklogIssueDo) Join(table schema.Tabler, on ...field.Expr) INulabBacklogIssueDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nulabBacklogIssueDo) LeftJoin(table schema.Tabler, on ...field.Expr) INulabBacklogIssueDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nulabBacklogIssueDo) RightJoin(table schema.Tabler, on ...field.Expr) INulabBacklogIssueDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nulabBacklogIssueDo) Group(cols ...field.Expr) INulabBacklogIssueDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nulabBacklogIssueDo) Having(conds ...gen.Condition) INulabBacklogIssueDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nulabBacklogIssueDo) Limit(limit int) INulabBacklogIssueDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nulabBacklogIssueDo) Offset(offset int) INulabBacklogIssueDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nulabBacklogIssueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INulabBacklogIssueDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nulabBacklogIssueDo) Unscoped() INulabBacklogIssueDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nulabBacklogIssueDo) Create(values ...*entities.NulabBacklogIssue) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nulabBacklogIssueDo) CreateInBatches(values []*entities.NulabBacklogIssue, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nulabBacklogIssueDo) Save(values ...*entities.NulabBacklogIssue) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nulabBacklogIssueDo) First() (*entities.NulabBacklogIssue, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.NulabBacklogIssue), nil
	}
}

func (n nulabBacklogIssueDo) Take() (*entities.NulabBacklogIssue, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.NulabBacklogIssue), nil
	}
}

func (n nulabBacklogIssueDo) Last() (*entities.NulabBacklogIssue, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.NulabBacklogIssue), nil
	}
}

func (n nulabBacklogIssueDo) Find() ([]*entities.NulabBacklogIssue, error) {
	result, err := n.DO.Find()
	return result.([]*entities.NulabBacklogIssue), err
}

func (n nulabBacklogIssueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.NulabBacklogIssue, err error) {
	buf := make([]*entities.NulabBacklogIssue, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nulabBacklogIssueDo) FindInBatches(result *[]*entities.NulabBacklogIssue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nulabBacklogIssueDo) Attrs(attrs ...field.AssignExpr) INulabBacklogIssueDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nulabBacklogIssueDo) Assign(attrs ...field.AssignExpr) INulabBacklogIssueDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nulabBacklogIssueDo) Joins(fields ...field.RelationField) INulabBacklogIssueDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nulabBacklogIssueDo) Preload(fields ...field.RelationField) INulabBacklogIssueDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nulabBacklogIssueDo) FirstOrInit() (*entities.NulabBacklogIssue, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.NulabBacklogIssue), nil
	}
}

func (n nulabBacklogIssueDo) FirstOrCreate() (*entities.NulabBacklogIssue, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.NulabBacklogIssue), nil
	}
}

func (n nulabBacklogIssueDo) FindByPage(offset int, limit int) (result []*entities.NulabBacklogIssue, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nulabBacklogIssueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nulabBacklogIssueDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nulabBacklogIssueDo) Delete(models ...*entities.NulabBacklogIssue) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nulabBacklogIssueDo) withDO(do gen.Dao) *nulabBacklogIssueDo {
	n.DO = *do.(*gen.DO)
	return n
}
